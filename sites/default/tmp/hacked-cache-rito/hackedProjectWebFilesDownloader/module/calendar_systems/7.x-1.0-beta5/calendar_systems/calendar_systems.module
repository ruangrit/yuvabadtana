<?php

/**
 * @file
 * Contains Calendar Systems hook implementations and helpers.
 */

/**
 * Implements hook_help().
 */
function calendar_systems_help($path, $arg) {
  switch ($path) {
    case 'admin/config/regionals/calendar-systems':
      $output = '<p>' . t('Using the following form you can assign a different calendar system to each language and also select the default calendar system.') .'</p>';
      return $output;
  }
}

/**
 * Implements hook_perm().
 */
function calendar_systems_permission() {
  return array(
    'administer calendar_systems' => array(
      'title' => t('Administer calendar systems'),
      'description' => t('Administer calendar systems configurations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function calendar_systems_menu() {
  $items = array();

  // Main configuration page:
  $items['admin/config/regional/calendar-systems'] = array(
    'title' => 'Calendar systems',
    'description' => 'Administer calendar systems profiles.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_systems_profile_overview'),
    'access arguments' => array('administer calendar_systems'),
    'file' => 'calendar_systems.admin.inc',
  );
  // Configuration profile:
  $items['admin/config/regional/calendar-systems/profile'] = array(
    'title' => 'Calendar systems profiles',
    'description' => 'Assign calendar systems.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Profile removal:
  $items['admin/config/regional/calendar-systems/profile/%/delete'] = array(
    'title' => 'Remove',
    'description' => 'Calendar systems profile removal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('calendar_systems_profile_delete_confirm', 5),
    'access arguments' => array('administer calendar_systems'),
    'file' => 'calendar_systems.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_theme().
 */
function calendar_systems_theme() {
  return array(
    'calendar_systems_profile_overview' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implementation of hook format_date_calendar_systems
 * Work around to prevent incompatibility with modules that already have
 * a function named module_name_format_date
 */
function calendar_systems_format_date_calendar_systems($timestamp, $type = 'medium', $format = '', $timezone = NULL, $langcode = NULL) {
  foreach (module_implements('format_date') AS $module) {
    if ($module != 'date' && $module != 'token' && $module != 'reldate') {
      $function = $module .'_format_date';
      $r = $function($timestamp, $type, $format, $timezone, $langcode);

      if ($r != FALSE) {
        return $r;
      }
    }
  }
}

/**
 * Implementation of hook format_date
 *
 * Format a date with the given configured format or a custom format string.
 *
 * Drupal allows administrators to select formatting strings for 'small',
 * 'medium' and 'large' date formats. This function can handle these formats,
 * as well as any custom format.
 *
 * @param $timestamp
 *   The exact date to format, as a UNIX timestamp.
 * @param $type
 *   The format to use. Can be "small", "medium" or "large" for the preconfigured
 *   date formats. If "custom" is specified, then $format is required as well.
 * @param $format
 *   A PHP date format string as required by date(). A backslash should be used
 *   before a character to avoid interpreting the character as part of a date
 *   format.
 * @param $timezone
 *   Time zone offset in seconds; if omitted, the user's time zone is used.
 * @param $langcode
 *   Optional language code to translate to a language other than what is used
 *   to display the page.
 * @return
 *   A translated date string in the requested format.
 */
function calendar_systems_format_date($timestamp, $type = 'medium', $format = '', $timezone = NULL, $langcode = NULL) {
  $calendar = calendar_systems_get_calendar_instance();

  if (calendar_systems_get_calendar_system_name() == 'default') return NULL;

  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['timezones'] = &drupal_static(__FUNCTION__);
  }
  $timezones = &$drupal_static_fast['timezones'];

  if (!isset($timezone)) {
    $timezone = date_default_timezone_get();
  }
  // Store DateTimeZone objects in an array rather than repeatedly
  // constructing identical objects over the life of a request.
  if (!isset($timezones[$timezone])) {
    $timezones[$timezone] = timezone_open($timezone);
  }

  /*
  if (!is_null($timezone)) {
    $hour=floor($timezone/3600);
    $minute=floor(($timezone%3600)/60);
    $timezone=$hour.':'.$minute;
    $calendar->setTimeZoneOffset('0:0');
  }
  */
  $calendar->setTimeZoneOffset('0:0');

  $timezone = $timezones[$timezone]->getOffset(new DateTime("GMT"));

  if (!is_null($timezone)) {
    //$timezones[$timezone] = timezone_open($timezone);
    $hour = floor($timezone/3600);
    $minute = round(($timezone%3600)/60);
    $calendar->setTimeZoneOffset("$hour:$minute");
  }

  $timestamp += $timezone;

  switch ($type) {
    case 'small':
      $format = variable_get('date_format_short', 'm/d/Y - H:i');
      break;
    case 'large':
      $format = variable_get('date_format_long', 'l, F j, Y - H:i');
      break;
    case 'custom':
      // No change to format.
      break;
    case 'medium':
    default:
      $format = variable_get('date_format_medium', 'D, m/d/Y - H:i');
  }

  $max = strlen($format);
  $date = '';
  for ($i = 0; $i < $max; $i++) {
    $c = $format[$i];
    if (strpos('AaDlM', $c) !== FALSE) {
      $date .= t($calendar->timestampToStr($c, $timestamp), array(), array('langcode' => $langcode));
    }
    elseif ($c == 'F') {
      // Special treatment for long month names: May is both an abbreviation
      // and a full month name in English, but other languages have
      // different abbreviations.
      $date .= trim(t('!long-month-name ' . $calendar->timestampToStr($c, $timestamp), array('!long-month-name' => ''), array('langcode' => $langcode)));
    }
    elseif (strpos('BdgGhHiIjLmnsStTUwWYyz', $c) !== FALSE) {
      $date .= $calendar->timestampToStr($c, $timestamp);
    }
    elseif ($c == 'r') {
      $date .= calendar_systems_format_date($timestamp - $timezone, 'custom', 'D, d M Y H:i:s O', $timezone, $langcode);
    }
    elseif ($c == 'O') {
      $date .= sprintf('%s%02d%02d', ($timezone < 0 ? '-' : '+'), abs($timezone / 3600), abs($timezone % 3600) / 60);
    }
    elseif ($c == 'Z') {
      $date .= $timezone;
    }
    elseif ($c == '\\') {
      $date .= $format[++$i];
    }
    else {
      $date .= $c;
    }
  }

  return $date;
}

/**
 * hook_module_implements_alter
 * @param $implementations
 * @param $hook
 */
function calendar_systems_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $var = $implementations['calendar_systems'];
    unset($implementations['calendar_systems']);
    $implementations['calendar_systems'] = $var;
  }
}

/**
 * Implements hook_form_alter().
 *
 * @todo
 *   Extend, fix.
 */
function calendar_systems_form_alter(&$form, $form_state, $form_id) {
  if (calendar_systems_get_calendar_system_name() != 'default') {
    // Overwrite date field element validate callback:
    if (@isset($form['scheduler_settings']['publish_on'])) {
      $form['scheduler_settings']['publish_on']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$form['author']['date']['#element_validate']);
      if (variable_get('calendar_systems_js_date_picker_core_text_date_fields')) {
        $form['scheduler_settings']['publish_on']['#attributes']['class'][] = 'calendar_systems_js_date_picker_force_time';
        calendar_systems_add_js_date_picker('.calendar_systems_js_date_picker_force_time');
      }
    }
    if (@isset($form['scheduler_settings']['unpublish_on'])) {
      $form['scheduler_settings']['unpublish_on']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$form['author']['date']['#element_validate']);
      if (variable_get('calendar_systems_js_date_picker_core_text_date_fields')) {
        $form['scheduler_settings']['unpublish_on']['#attributes']['class'][] = 'calendar_systems_js_date_picker_force_time';
        calendar_systems_add_js_date_picker('.calendar_systems_js_date_picker_force_time');
      }
    }
    if (isset($form['author']['date'])) {
      $form['author']['date']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$form['author']['date']['#element_validate']);
      if (variable_get('calendar_systems_js_date_picker_core_text_date_fields')) {
        $form['author']['date']['#attributes']['class'][] = 'calendar_systems_js_date_picker_force_time';
        calendar_systems_add_js_date_picker('.calendar_systems_js_date_picker_force_time');
      }
    }
    if (isset($form['admin']['date'])) {
      $form['admin']['date']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$form['admin']['date']['#element_validate']);
      if (variable_get('calendar_systems_js_date_picker_core_text_date_fields')) {
        $form['admin']['date']['#attributes']['class'][] = 'calendar_systems_js_date_picker_force_time';
        calendar_systems_add_js_date_picker('.calendar_systems_js_date_picker_force_time');
      }
    }
    if ($form_id == 'views_exposed_form') {
      $form['#validate'] = array_merge($form['#validate'], array('_calendar_systems_views_exposed_form_validate'));
    }
  }
}


/**
 * @param $element
 * @param $form_state
 * @todo supporting month and day only filters and contextual filters
 */
function _calendar_systems_views_exposed_form_validate($element, &$form_state) {
  $position = -1;
  foreach ($form_state['view']->display_handler->handlers['argument'] as $filter_name => $filter) {
    $position++;
    $filter_class = get_class($filter);
    if ($filter_class == 'date_views_argument_handler' || $filter_class == 'date_views_argument_handler_simple' || $filter_class == 'views_handler_filter_date'
      || $filter_class == 'views_handler_argument_node_created_fulldate' || $filter_class == 'views_handler_argument_node_created_year' || $filter_class == 'views_handler_argument_node_created_year_month') {

      $value = &$form_state['view']->args[$position];
      if (!empty($value)) {
        if ($filter_class == 'views_handler_argument_node_created_fulldate') {
          $convert_option['iso_fixed_position'] = TRUE;
        }
        $date_format = $filter->arg_format;
        $options = array();
        if ($filter_class == 'views_handler_argument_node_created_fulldate' || $filter_class == 'views_handler_argument_node_created_year' || $filter_class == 'views_handler_argument_node_created_year_month') {
          $options['iso_fixed_size_position'] = TRUE;
        }

        $value = _calendar_systems_date_convert($value, $date_format, NULL, $options);
      }
    }
  }


  foreach ($form_state['view']->display_handler->handlers['filter'] as $filter_name => $filter) {
    $filter_class = get_class($filter);
    if ($filter_class == 'date_views_filter_handler' || $filter_class == 'date_views_filter_handler_simple' || $filter_class == 'views_handler_filter_date') {
      if (!empty($form_state['view']->exposed_input[$filter_name]['value'])) {
        foreach (array('value', 'value2', 'min', 'max') as $index) {
          if (isset($form_state['view']->exposed_input[$filter_name][$index])) {
            $value = _calendar_systems_date_convert($form_state['view']->exposed_input[$filter_name][$index]);
            $is_empty = TRUE;
            if (is_array($value) && class_exists('DateObject')) {
              if (@!empty($value['year'])) {
                $is_empty = FALSE;
              }
              $date = new DateObject($value);
              $value = $date->format($element[$filter_name][$index]['#date_format']);
            } else {
              if (!empty($value)) {
                $is_empty = FALSE;
              }
            }
            if (1 == 1) {
              $form_state['view']->exposed_input[$filter_name][$index] = $value;
              form_set_value($element, $form_state['view']->exposed_input, $form_state);
            } else {
              if (isset($element['#name'])) {
                $field = $element['#name'];
              } else {
                $field = $element;
              }
              //form_set_error($element, t('You have to specify a valid date.'));
            }
          }
        }
      }
    }
  }
}

/**
 * @param $date
 * @param null $format
 * @return array|bool|int|mixed|null|string
 *
 * Internal helper method to convert and validate date
 */
function _calendar_systems_date_convert($date, $format = NULL, $calendar_system = NULL, $options = array()) {
  if (is_null($calendar_system)){
    $calendar_system = calendar_systems_get_calendar_system_name();
  }
  if ($calendar_system == 'default') {
    return $date;
  }
  // Get proper calendar instance:
  $calendar = calendar_systems_get_calendar_instance($calendar_system);
  $result = FALSE;
  if (is_array($date)) {
    $r = $calendar->isDateValid($date['month'], $date['day'], $date['year']);
    if ($r !== 0 && $r !== FALSE) {
      list($date['year'], $date['month'], $date['day']) = $calendar->toGregorian($date['year'], $date['month'], $date['day']);
      $result = $date;
    }
  } else {
    $date_parts = array();
    if (isset($options['iso_fixed_size_position']) && $options['iso_fixed_size_position']) {
      $format_parser = '(?<year>[0-9]{4})(?<month>[0-9]{2})?(?<day>[0-9]{2})?(?<hour>[0-9]{2})?(?<minute>[0-9]{2})?(?<second>[0-9]{2})?';
      if (preg_match_all("%$format_parser%", $date, $matches)) {
        $date_parts['year'] = @$matches['year'][0];
        $date_parts['month'] = @$matches['month'][0];
        $date_parts['day'] = @$matches['day'][0];
        $date_parts['hour'] = @$matches['hour'][0];
        $date_parts['minute'] = @$matches['minute'][0];
        $date_parts['second'] = @$matches['second'][0];
      }
    } elseif (!is_null($format)) {
      $format = preg_quote($format);
      $format_parser = preg_replace('%([a-zA-Z])%', '(?<$1>[0-9]+)', $format); //dDjFmMnYy
      if (preg_match_all("%$format_parser%", $date, $matches)) {
        $date_parts['year'] = @$matches['Y'][0];
        $date_parts['month'] = @$matches['m'][0];
        $date_parts['day'] = @$matches['d'][0];
        $date_parts['hour'] = @$matches['H'][0];
        $date_parts['minute'] = @$matches['i'][0];
        $date_parts['second'] = @$matches['s'][0];
      }
    } else {
      // Extract date and time:
      $_date = preg_replace('/([0-9]+\-[0-9]+\-[0-9]+) (.*)/si', '$1', $date);
      $time = preg_replace('/([0-9]+\-[0-9]+\-[0-9]+) (.*)/si', '$2', $date);

      if (preg_match('/^([0-9]{2,4})[-\/\\\]([0-9]{1,2})[-\/\\\]([0-9]{1,2})( +([0-9]{1,2})[:]([0-9]{1,2})[:]([0-9]{1,2}))?/', $_date, $regs)) {
        $date_parts['year'] = $regs[1];
        $date_parts['month'] = $regs[2];
        $date_parts['day'] = $regs[3];
        $format = "Y-m-d $time";
      }
    }

    // Convert to timestamp:
    if ($date_parts) {
      if (@empty($date_parts['month'])) {
        $date_parts['month'] = 1;
      }
      if (@empty($date_parts['day'])) {
        $date_parts['day'] = 1;
      }
      $r = $calendar->isDateValid($date_parts['month'], $date_parts['day'], $date_parts['year']);
      if ($r !== 0 && $r !== FALSE) {
        $result = $calendar->strToTimestamp("{$date_parts['year']}-{$date_parts['month']}-{$date_parts['day']} 10:10:10");
        $result = date($format, $result);
      }
    }
  }

  return $result;
}

/**
 * Element validation callback for date fields.
 *
 * @param $element
 *   Form element.
 * @param $form_state
 *   Known form state array.
 */
function calendar_systems_date_validate($element, &$form_state) {
  if (@$element['#calendar_system'] != 'default')
    if (!empty($element['#value']) && is_array($element['#value'])) {
      $format = NULL;
      if (isset($element['value']['#date_format'])) {
        $format = $element['value']['#date_format'];
        if ($element['value']['#instance']['widget']['type'] == 'date_popup') {
          $format = preg_replace('%( \- [a-zA-Z].*)%', '', $format);
        }
      }

      if (isset($element['#name'])) {
        $field_name = $element['#name'];
      } elseif (isset($element['#field_name'])) {
        $field_name = $element['#field_name'];
      }
      if (isset($element['#value']['value2']) || preg_match('%value2%', $field_name)) {
        $item_name = 'value2';
      } else {
        $item_name = 'value';
      }
      if ($field_name) {
        $field_name = preg_replace('%\[.*%', '', $field_name);
      }
      $input_exists = NULL;

      $date_format = NULL;
      if (isset($element['#date_format'])) {
        $date_format = $element['#date_format'];
      }
      $value_path = $element['#parents'];

      if (isset($form_state['exposed_form_plugin']) && isset($form_state['view'])) {
        if ($element['#type'] == 'date_popup') {
          $value_path[] = 'date';
          $field_value = &$element['#value']['date'];
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $value_path, $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
          $field_real_value = $field_value_in_form_input;
        }
        if ($element['#type'] == 'date_select') {
          $field_value = &$element['#value'][$item_name];
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $element['#parents'], $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $element['#parents'], $input_exists);
          $field_real_value = $field_value_in_form_input;
          if (@empty($field_real_value['year'])) {
            $field_real_value = NULL;
          }
        }
        if ($element['#type'] == 'date_text') {
          $value_path[] = 'date';
          $field_value = &$element['#value']['date'];
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $value_path, $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
          $field_real_value = $field_value_in_form_input;
        }
      } else {
        if ($element['#type'] == 'date_popup') {
          $field_value = &$element['#value']['date'];
          $value_path[] = 'date';
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $value_path, $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
          $field_real_value = $field_value_in_form_input;
          $date_format = _calendar_systems_get_format_part('date', $date_format);
        }
        if ($element['#type'] == 'date_select') {
          $field_value = &$element['#value'];
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $value_path, $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
          $field_real_value = $field_value_in_form_input;
          if (@empty($field_real_value['year'])) {
            $field_real_value = NULL;
          }
        }
        if ($element['#type'] == 'date_text') {
          $value_path[] = 'date';
          $field_value = &$element['#value']['date'];
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $value_path, $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
          $field_real_value = $field_value_in_form_input;
        }
        if ($element['#type'] == 'date' || $element['#type'] == 'text') {
          $field_value = &$element['#value'];
          //$field_value_second = &$element[$item_name]['date']['value'];
          $field_value_in_form_state = drupal_array_get_nested_value($form_state['values'], $value_path, $input_exists);
          $field_value_in_form_input = drupal_array_get_nested_value($form_state['input'], $value_path, $input_exists);
          $field_real_value = $field_value_in_form_input;
        }
      }

      $field_real_value_converted = _calendar_systems_date_convert($field_real_value, $date_format, $element['#calendar_system']);

      if (!empty($field_real_value)) {

        if ($field_real_value_converted) {
          $field_value = $field_real_value_converted;
          drupal_array_set_nested_value($form_state['values'], $value_path, $field_real_value_converted);
          drupal_array_set_nested_value($form_state['input'], $value_path, $field_real_value_converted);
          if (isset($field_value_second)) {
            $field_value_second = $field_real_value_converted;
          }
          //dsm($form_state);
          form_set_value($element, $element['#value'], $form_state);
        } else {
          form_set_error($element['#name'], t('You have to specify a valid date.'));
        }
      }
    } elseif (!empty($element['#value'])) {

      $value = _calendar_systems_date_convert($element['#value']);
      if ($value) {
        $element['#value'] = $value;
        form_set_value($element, $element['#value'], $form_state);
      } else {
        form_set_error($element['#name'], t('You have to specify a valid date.'));
      }
    }
}

/**
 * Internal helper to load calendar system's required dependencies.
 */
function _calendar_systems_load_dependencies() {
  // This static variable will not need to be reset during
  // the page request, so we're not using drupal_static() here.
  static $loaded = FALSE;

  if (!$loaded) {
    if (!module_exists('cml')) {
      module_load_include('class.inc.php', 'calendar_systems', 'calendar/lib/exception');
      module_load_include('class.inc.php', 'calendar_systems', 'calendar/lib/classesCore');
    }
    if (!class_exists('cmfcCalendar')) {
      module_load_include('class.inc.php', 'calendar_systems', 'calendar/calendar');
    }
    $loaded = TRUE;
  }
}

/**
 * Internal helper which defines all available calendars manually.
 *
 * @return
 *   An array defined calendars.
 *
 * @todo
 *   Define a pluggable API, so other modules can hook the hell in.
 */
function _calendar_systems_plugins() {
  $result = array(
    'default' => array(
      'title' => t('Default'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
    'iranian' => array(
      'title' => t('Iranian'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
    'arabic'  => array(
      'title' => t('Arabic'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
    'thai'  => array(
      'title' => t('Thai'),
      'installed' => TRUE,
      'installed version' => 2,
    ),
  );

  return $result;
}

/**
 * Internal helper to get all active languages.
 *
 * @return
 *   An array of active languages.
 */
function _calendar_systems_langauges() {
  // Default:
  $languages['default'] = array(
    'name' => 'Default'
  );

  // Check if there's any additional locale available:
  $locales = function_exists('locale_language_list') ?
    locale_language_list('name', TRUE) : NULL;

  // If found, append 'em:
  if (!is_null($locales)) {
    foreach ($locales as $name => $title) {
      $languages[$name] = array(
        'name' => $title,
      );
    }
  }

  return $languages;
}

/**
 * Internal helper to return site's current language.
 *
 * @return
 *   Current language.
 */
function _calendar_systems_languages_active() {
  global $language;
  // Better?
  return ($language && $language->language) ? $language->language : 'default';
}

/**
 * Internal static cache helper to get all available profiles.
 *
 * @return
 *   An array of available profiles.
 */
function _calendar_systems_profiles() {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    $cache = array();
    $profiles = db_query('SELECT language, calendar_system, settings FROM {calendar_systems}');
    // Build an array of profiles keyed by the identifiers:
    foreach ($profiles as $profile) {
      $profile->settings = unserialize($profile->settings);
      $cache[$profile->language] = $profile;
    }
  }

  return $cache;
}


/**
 * Internal static cache helper to get all available profiles for using as form select element options.
 *
 * @return
 *   An array of available profiles.
 */
function _calendar_systems_profiles_simple($default_options = FALSE) {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache)) {
    $calendar_systems = _calendar_systems_plugins();
    $cache = array();
    if ($default_options !== FALSE) {
      $cache = $default_options;
    }
    // Build available calendar systems array:
    foreach ($calendar_systems as $id => $calendar_system) {
      $cache[$id] = $calendar_system['title'];
    }
  }

  return $cache;
}

/**
 * Helper to determine the active calendar system
 */
function calendar_systems_get_calendar_system_name($language = NULL) {
  // Load all available profiles:
  $profiles = _calendar_systems_profiles();
  // Get site's current language:
  if (is_null($language)) {
    $language = _calendar_systems_languages_active();
  }

  if (isset($profiles[$language])) {
    $calendar_system = $profiles[$language]->calendar_system;
  }
  elseif (isset($profiles['default'])) {
    $calendar_system = $profiles['default']->calendar_system;
  }

  if (empty($calendar_system))  {
    $calendar_system = 'default';
  }

  return $calendar_system;
}

/**
 * Gets an instance of the calendar object for
 * the selected calendar system acording to the settings
 * or the passed arguments
 *
 * @return
 *   Calendar object or default on fail.
 *
 */
function calendar_systems_get_calendar_instance($calendar_system = NULL, $language = NULL) {
  // Load module dependencies:
  _calendar_systems_load_dependencies();
  if (is_null($calendar_system)) {
    $calendar_system = calendar_systems_get_calendar_system_name($language);
  }

  if ($calendar_system == 'iranian') {
    $calendar = cmfcCalendar::factory('v1', array(
      'name' => 'iranian',
    ));
  }
  elseif ($calendar_system == 'arabic') {
    $calendar = cmfcCalendar::factory('v1', array(
      'name' => 'arabic',
    ));
  }
  elseif ($calendar_system == 'default') {
    $calendar = cmfcCalendar::factory('v1', array(
      'name' => 'gregorian',
    ));
  }
  elseif ($calendar_system == 'thai') {
    $calendar = cmfcCalendar::factory('v1', array(
      'name' => 'thai',
    ));
  }

  return $calendar;
}

/**
 * Implementation of hook_patch() of patch_manager module
 */
function calendar_systems_patch() {
  $patches = array();

  $patches[] = array(
    'title'       => t('Allows drupal format_date function to be hooked'),
    'patch'       => 'core_format_date_hook.patch',
    'module'      => 'core',
    'issue'       => '',
    'description' => t('Allows drupal format_date function to be hooked'),
    'patchdir'    => 'patch'
  );

  return $patches;
}

/**
 * Load requires libraries for javascript date picker support
 */
function calendar_systems_load_js_date_picker_library() {
  if (module_exists('jquery_calendar')) {
    //Use the default settings configurable by date pickers' provider drupal module
    jquery_calendar_add(
      'picker, picker.ext, persian, islamic'
    );
  }
}

/**
 * Add javascript date picker for a field or set of fields
 */
function calendar_systems_add_js_date_picker($css_class_id_type, $calendar_system = NULL, $language = NULL) {
  calendar_systems_load_js_date_picker_library();
  static $used_ids;

  if (module_exists('jquery_calendar') && !isset($used_ids[$css_class_id_type])) {
    $alignment = 'topLeft';

    if (is_null($language)) {
      $language = _calendar_systems_languages_active();
    }
    $languages = language_list();
    if (isset($languages[$language])) {
      if ($languages[$language]->direction) {
        $alignment = 'topRight';
      }
    }
    if (is_null($calendar_system)) {
      $calendar_system = calendar_systems_get_calendar_system_name($language);
    }
    if ($calendar_system == 'default') {
      $calendar_system = 'gregorian';
    }
    $calendar_system_name_map = array(
      'arabic' => 'islamic',
      'iranian' => 'persian',
      'gregorian' => 'gregorian',
    );

    $date_format = 'yyyy-mm-dd';
    $time_format = '';
    if ($css_class_id_type == '.calendar_systems_js_date_picker_date_module') {
      $date_format = 'mm/dd/yyyy';
      $time_format = '';
    }
    if ($css_class_id_type == '.calendar_systems_js_date_picker_force_time') {
      $time_format = 'H:i:s';
    }

    $time = '';
    if (!empty($time_format)) {
      $time = format_date(mktime(), 'custom', $time_format);
    }

    $calendar_system = $calendar_system_name_map[$calendar_system];
    $js = <<< EOT
(function($) {
  $('$css_class_id_type').calendarsPicker({
    calendar: $.calendars.instance('$calendar_system', '$language'),
    dateFormat: '$date_format',
    alignment: '$alignment',
    onShow: function (picker, calendar, inst) {
      if (picker) {
        picker_parts =$(this).val().split(' ');
      }
    },
    onSelect: function (dates) {
      if (dates) {
        if (picker_parts[1]) {
          dates = dates + ' '  + picker_parts[1];
        } else if ('' != '$time') {
          dates = dates + ' ' + '$time';
        }
        if ('' != '$time_format') {
          if (picker_parts[2]) {
            dates = dates + ' ' + picker_parts[2];
          }
          $(this).val(dates);
        }
      }
    }
  });
})(jQuery);
EOT;
    //alert(dates);\$('$css_class_id_type').calendarsPicker('setDate', '1350/10/10');
    //onDate: function (date) {alert(date);}
    //altField: function (date) {alert(date);}
    drupal_add_js($js,
      array('type' => 'inline', 'scope' => 'footer', 'weight' => 5)
    );

    $used_ids[$css_class_id_type] = TRUE;
  }
}

/**
 * For basic integration with views
 * @param $variables
 */
function calendar_systems_preprocess_content_field(&$variables) {
  // Are we called for the right field?
  if ($variables['field_type'] == 'date') {
    foreach ($variables['items'] as $key => $item) {
      $display = 'full';
      if ($variables['teaser']) {
        $display = 'teaser';
      }
      $type_info = date_get_format_types($variables['field']['display_settings'][$display]['format']);

      if (!$type_info) {
        $_format = $variables['field']['default_format'];
      }
      else {
        $_format = $type_info['title'];
      }

      if (!isset($variables['field']['granularity'])) {
        $granularity = FALSE;
      }
      else {
        $granularity = $variables['field']['granularity'];
      }

      if (isset($variables['items'][$key]['value2'])) {
        $format = _calendar_systems_get_format($_format, $granularity);
        $variables['items'][$key]['view'] = calendar_systems_format_date(strtotime($variables['items'][$key]['value']), 'custom', $format) . ' - ' . format_date(strtotime($variables['items'][$key]['value2']), 'custom', $format);
      }
      else {
        $format = _calendar_systems_get_format($_format, $granularity);
        $variables['items'][$key]['view'] = calendar_systems_format_date(strtotime($variables['items'][$key]['value']), 'custom', $format);
      }
    }
  }
}

/**
 * Helper function
 * @param $format
 * @param $granularity
 * @return string
 */
function _calendar_systems_get_format($format, $granularity) {
  $new_format = '';

  switch ($format) {
    case 'small':
    case 'short':
      $new_format = variable_get('date_format_short', 'm/d/Y - H:i');
      break;
    case 'large':
      $new_format = variable_get('date_format_long', 'l, F j, Y - H:i');
      break;
    case 'medium':
      $new_format = variable_get('date_format_medium', 'D, m/d/Y - H:i');
      break;
    default:
      $new_format = $format;
      break;
  }
  if ($granularity) {
    $new_format = _calendar_systems_fix_by_granularity($new_format, $granularity);
    $new_format = _calendar_systems_fix_whitespace($new_format, $granularity);
  }
  return $new_format;
}

/**
 * Helper function
 * @param $format
 * @param $granularity
 * @return string
 */
function _calendar_systems_fix_by_granularity($format, $granularity) {
  $new_format = '';
  $list = _calendar_systems_get_date_format();
  for ($i=0; $i < strlen($format); $i++) {
    $c = $format[$i];
    if (isset($list[$c])) {
      if (isset($granularity[$list[$c]])) {
        $new_format .= $c;
      }
    }
    else{
      $new_format .= $c;
    }
  }

  return $new_format;
}

/**
 * Helper function
 * @param $format
 * @param $granularity
 * @return string
 */
function _calendar_systems_fix_whitespace($format, $granularity) {
  $new_format = '';
  $list = _calendar_systems_get_date_format();

  //remove whitespaces from end
  $i = strlen($format) - 1;
  for (; $i >= 0; $i--) {
    $c = $format[$i];
    if (isset($list[$c])) {
      break;
    }
  }
  $format = substr($format, 0, $i + 1);

  //remove whitespaces from begining
  $i = 0;
  for (; $i < strlen($format); $i++) {
    $c = $format[$i];
    if (isset($list[$c])) {
      break;
    }
  }

  $new_format = substr($format, $i, strlen($format) - $i);

  return $new_format;
}


/**
 * Helper function
 *
 * @return
 *   A List of valid date format characters
 */
function _calendar_systems_get_date_format() {
  $chars=array(
    'L' => 'year',
    'o' => 'year',
    'Y' => 'year',
    'y' => 'year',
    'F' => 'month',
    'm' => 'month',
    'M' => 'month',
    'n' => 'month',
    't' => 'month',
    'd' => 'day',
    'D' => 'day',
    'j' => 'day',
    'l' => 'day',
    'N' => 'day',
    'S' => 'day',
    'w' => 'day',
    'z' => 'day',
    'a' => 'hour',
    'A' => 'hour',
    'B' => 'hour',
    'g' => 'hour',
    'G' => 'hour',
    'h' => 'hour',
    'H' => 'hour',
    'i' => 'minute',
    's' => 'second',
    'u' => 'second',
    'e' => 'hour',
    'O' => 'hour',
    'P' => 'hour',
    'T' => 'hour',
    'Z' => 'second',
    'I' => 'day',
    'c' => '',
    'r' => '',
    'U' => '',
  );

  return $chars;
}


/**
 * hook_field_formatter_info_alter
 * @param $info
 */
function calendar_systems_field_formatter_info_alter(&$info) {
  // Add a setting to a formatter type.
  if (!isset($info['date_default']['settings']) || !is_array($info['date_default']['settings'])) {
    $info['date_default']['settings'] = array();
  }
  $info['date_default']['settings'] += array(
    'calendar_system' => '',
  );
  if (!isset($info['date_plain']['settings']) || !is_array($info['date_plain']['settings'])) {
    $info['date_plain']['settings'] = array();
  }
  $info['date_plain']['settings'] += array(
    'calendar_system' => '',
  );
}

/**
 * Implements hook_date_field_formatter_settings_form
 */
function calendar_systems_date_field_formatter_settings_form_alter(&$form, &$form_state, &$context) {
  $options = _calendar_systems_profiles_simple(array(t('Site\'s default'), 'same_as_field_settings' => t('Same as field settings')));
  $settings = $context['instance']['display'][$context['view_mode']]['settings'];
  $form['calendar_system']= array(
    '#type' => 'select',
    '#title' => t('Calendar system'),
    '#default_value' => (empty($settings['calendar_system']) ? '' : $settings['calendar_system']),
    '#options' => $options,
    '#description' => t('Select the calendar system you want to be used regardless of site default calendar system or field settings')
  );
}


/**
 * Implements date_field_formatter_settings_summary
 */
function calendar_systems_date_field_formatter_settings_summary_alter(&$summary, $context) {
  $settings = $context['instance']['display'][$context['view_mode']]['settings'];
  if ($settings['calendar_system']) {
    $options = _calendar_systems_profiles_simple(array(t('Site\'s default'), 'same_as_field_settings' => t('Same as field settings')));
    $summary[] = t('Selected calendar system is %s', array('%s' => $options[$settings['calendar_system']]));
  }
}


/**
 * Implements hook_preprocess_date_display_combination().
 * @param $variables
 */
function calendar_systems_preprocess_date_display_combination(&$variables) {
  $instance_settings = $variables['display']['settings']['calendar_system'];

  $calendar_system = calendar_systems_get_calendar_system_name();
  if (empty($instance_settings)) {

  } elseif ($instance_settings == 'same_as_field_settings') {
    $calendar_system = $variables['field']['settings']['calendar_system'];
  } else {
    $calendar_system = $instance_settings;
  }

  if ($calendar_system != 'default') {
    $format = $variables['dates']['format'];
    $date = $variables['dates']['value']['local']['datetime'];
    $variables['dates']['value']['formatted'] = calendar_systems_fix_display($date, $format, $calendar_system);

    if (isset($variables['dates']['value2'])) {
      $date = $variables['dates']['value2']['local']['datetime'];
      $variables['dates']['value2']['formatted'] = calendar_systems_fix_display($date, $format, $calendar_system);
    }
  }
}

/**
 * @param $date
 * @param $format
 * @return bool|mixed
 */
function calendar_systems_fix_display($date, $format, $calendar_system_name) {
  $calendar = calendar_systems_get_calendar_instance($calendar_system_name);
  $date = new DateObject($date);
  $timestamp = $date->format("U");
  if (!$timestamp) {
    return FALSE;
  }
  else {
    $content = $calendar->smartGet($format, $timestamp);
    return $content;
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function calendar_systems_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'datetime' || $form['#field']['type'] == 'date' || $form['#field']['type'] == 'datestamp') {
    $options =  _calendar_systems_profiles_simple(array(t('Site\'s default')));
    $settings = $form['#field']['settings'];
    $form['field']['settings']['calendar_system']= array(
      '#type' => 'select',
      '#title' => t('Calendar system'),
      '#default_value' => (empty($settings['calendar_system']) ? '' : $settings['calendar_system']),
      '#options' => $options,
      '#description' => t('Select the calendar system you want to be used regardless of site default calendar system')
    );
  }
}

/**
 * hook_field_info_alter
 * @param $info
 */
function calendar_systems_field_info_alter(&$info) {
  $field_type = 'datetime';
  if (isset($info[$field_type]['settings']) && $info[$field_type]['settings']) {
    $info[$field_type]['settings']['calendar_system'] = '';
  }
  $field_type = 'date';
  if (isset($info[$field_type]['settings']) && $info[$field_type]['settings']) {
    $info[$field_type]['settings']['calendar_system'] = '';
  }
  $field_type = 'datestamp';
  if (isset($info[$field_type]['settings']) && $info[$field_type]['settings']) {
    $info[$field_type]['settings']['calendar_system'] = '';
  }
}


/**
 * @param $type
 */
function calendar_systems_element_info_alter(&$type) {
  if (isset($type['date'])) {
    $type['date']['#process'] = array('_calendar_systems_element_date_process');
    $type['date']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$type['#element_validate']);
  }
  if (isset($type['date_popup'])) {
    $type['date_popup']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$type['#element_validate']);
  }
  if (isset($type['date_select'])) {
    $type['date_select']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$type['#element_validate']);
  }
  if (isset($type['date_text'])) {
    $type['date_text']['#element_validate'] = array_merge(array('calendar_systems_date_validate'), (array) @$type['#element_validate']);
  }
}




/**
 * Supporing date module's date_select element
 *
 * hook_date_select_process_alter
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function calendar_systems_date_select_process_alter(&$element, &$form_state, $context) {
  if (!isset($element['#calendar_system'])) {
    if (!empty($element['#field']['settings']['calendar_system'])) {
      $element['#calendar_system'] = $element['#field']['settings']['calendar_system'];
    } else {
      $element['#calendar_system'] = calendar_systems_get_calendar_system_name();
    }
  }
  if ($element['#calendar_system'] != 'default') {

    $calendar = calendar_systems_get_calendar_instance($element['#calendar_system']);

    $date_array = array();

    $value_path = $element['#parents'];
    //$value_path[] = 'year';
    $submitted_value = drupal_array_get_nested_value($form_state['input'], $value_path);
    $element_value = $element['#value'];
    if (@empty($element['#value']['year'])) {
      $element_value = $element['#default_value'];
    } else {
      $date_array = $element['#value'];
    }
    if (!empty($element_value) && empty($submitted_value)) {
      if (is_string($element_value)) {
        $date = new DateObject($element_value);
      } else {
        $date = date_select_input_date($element, $element_value);
      }
      if ($date) {
        $timestamp = $date->format("U");
        $element['#default_value'] = $calendar->smartGet(DATE_FORMAT_ISO, $timestamp);
        $date_array = $calendar->timestampToInfoArray($timestamp);
        $element['#value'] = $date_array;
      }
    }
    if (isset($element['year'])) {
      if ($element['#date_year_range']) {
        if ($date_array) {
          $element['year']['#default_value'] = $date_array['year'];
        }
        list($from, $to) = explode(':', $element['#date_year_range']);
        $from = intval($from);
        $to = intval($to);
        $current_year = $calendar->date('Y');
        $from_year = $current_year + $from;
        if ($element['year']['#default_value'] < $from_year && !empty($element['year']['#default_value']) ) {
          $from_year = $element['year']['#default_value'];
        }
        $to_year = $current_year + $to;
        if ($element['year']['#default_value'] > $to_year && !empty($element['year']['#default_value'])) {
          $to_year = $element['year']['#default_value'];
        }
        $years = array();
        if (isset($element['year']['#options'][''])) {
          $years[''] = $element['year']['#options'][''];
        }
        foreach (range($from_year, $to_year) as $year) {
          $years[$year] = $year;
        }
        $element['year']['#options'] = $years;
      }
    }
    if (isset($element['month'])) {
      if ($date_array) {
        $element['month']['#default_value'] = $date_array['month'];
      }
      $months = array();
      if (isset($element['month']['#options'][''])) {
        $months[''] = $element['month']['#options'][''];
      }
      $_months = $calendar->getOption('monthsName');
      foreach ($_months as $n => $month) {
        $months[$n] = html_entity_decode($month, ENT_QUOTES, 'UTF-8');;
      }
      $element['month']['#options'] = $months;
    }
    if (isset($element['day'])) {
      if ($date_array) {
        $element['day']['#default_value'] = $date_array['day'];
      }
    }
    //$element['day']['#options'] = ;
  }
}


/**
 * Supporing date module's date_popup element
 * hook_date_popup_process_alter
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function calendar_systems_date_popup_process_alter(&$element, &$form_state, $context) {
  if (!isset($element['#calendar_system'])) {
    if (!empty($element['#field']['settings']['calendar_system'])) {
      $element['#calendar_system'] = $element['#field']['settings']['calendar_system'];
    } else {
      $element['#calendar_system'] = calendar_systems_get_calendar_system_name();
    }
  }

  if ($element['#calendar_system'] != 'default') {
    $calendar = calendar_systems_get_calendar_instance($element['#calendar_system']);

    $date_format = $element['#date_format'];
    $granularity = _calendar_systems_get_granularity_from_format($date_format);

    $date_value = $element['#default_value'];
    $date_value = $element['#value']['date'];

    $value_path = $element['#parents'];
    $value_path[] = 'date';
    $submitted_value = drupal_array_get_nested_value($form_state['input'], $value_path);
    if (!empty($element['#value']) && empty($submitted_value)) {
      $date = date_popup_input_date($element, $element['#value']);
      if ($date) {
        $timestamp = $date->format("U");
        $element['#value']['date'] = $calendar->smartGet(DATE_FORMAT_ISO, $timestamp);
        $date_format = date_part_format('date', $date_format);
        $date_value = $calendar->smartGet($date_format, $timestamp);
      }
    }

    $date_granularity = _calendar_systems_get_granularity_part('date', $granularity);
    $granularity_css = 'granularity_'.implode('_', $date_granularity);
    $class_name = 'calendar_systems_js_date_picker_date_module';
    if (empty($element['date']['#attributes']['class'])) {
      $element['date']['#attributes']['class'] = array();
    }
    $date_format_considering_granularity = date_limit_format($date_format, $date_granularity);
    $element['date']['#description'] = str_replace(date($date_format_considering_granularity), $calendar->smartGet($date_format_considering_granularity), $element['date']['#description']);
    $element['date']['#attributes']['class'] = array_merge(@$element['date']['#attributes']['class'], array($class_name));
    $element['date']['#attributes']['class'][] = $granularity_css;
    $element['date']['#id'] = $element['#id'] . '_calendar_systems';
    if ($date_value) {
      $element['date']['#value'] = $date_value;
    }
    calendar_systems_add_js_date_picker('.' . $class_name);
  }
}


/**
 * Supporing date module's date_text element
 * hook_date_text_process_alter
 *
 * @param $element
 * @param $form_state
 * @param $context
 */
function calendar_systems_date_text_process_alter(&$element, &$form_state, $context) {
  if (!isset($element['#calendar_system'])) {
    if (!empty($element['#field']['settings']['calendar_system'])) {
      $element['#calendar_system'] = $element['#field']['settings']['calendar_system'];
    } else {
      $element['#calendar_system'] = calendar_systems_get_calendar_system_name();
    }
  }
  if ($element['#calendar_system'] != 'default') {

    $calendar = calendar_systems_get_calendar_instance($element['#calendar_system']);

    $date_format = $element['#date_format'];
    $granularity = _calendar_systems_get_granularity_from_format($date_format);

    $value_path = $element['#parents'];
    $value_path[] = 'date';
    $submitted_value = drupal_array_get_nested_value($form_state['input'], $value_path);
    if (!empty($element['#value']) && empty($submitted_value)) {
      $date = date_text_input_date($element, $element['#value']['date']);
      if ($date) {
        $timestamp = $date->format("U");
        $element['#value']['date'] = $calendar->smartGet(DATE_FORMAT_ISO, $timestamp);
        $date_format = date_limit_format($date_format, $granularity);
        $date_value = $calendar->smartGet($date_format, $timestamp);
      }
    }

    if (isset($date_value)) {
      $element['date']['#value'] = $date_value;
    }
  }
}



/**
 * Support drupal's core date field
 * @param $element
 * @return array
 */
function _calendar_systems_element_date_process(&$element, &$form_state) {
  $element = form_process_date($element);

  $year_range = '-100:+100';

  if (!isset($element['#calendar_system'])) {
    $element['#calendar_system'] = calendar_systems_get_calendar_system_name();
  }
  if ($element['#calendar_system'] != 'default') {

    $calendar = calendar_systems_get_calendar_instance($element['#calendar_system']);

    $date_array = array();

    $value_path = $element['#parents'];
    $submitted_value = drupal_array_get_nested_value($form_state['input'], $value_path);
    $element_value = $element['#value'];
    if (@empty($element['#value']['year'])) {
      $element_value = $element['#default_value'];
    } else {
      $date_array = $element['#value'];
    }

    if (!empty($element_value) && empty($submitted_value)) {
      if (is_array($element_value)) {
        $element_value = "{$element_value['year']}-{$element_value['month']}-{$element_value['day']}";
      }
      $date = new DateTime($element_value);
      if ($date) {
        $timestamp = $date->format("U");
        $element['#default_value'] = $calendar->smartGet("Y-m-d\TH:i:s", $timestamp);
        $date_array = $calendar->timestampToInfoArray($timestamp);
        $element['#value'] = $date_array;
      }
    }
    if (isset($element['year'])) {
      if ($year_range) {
        if ($date_array) {
          $element['year']['#value'] = $date_array['year'];
        }

        list($from, $to) = explode(':', $year_range);
        $from = intval($from);
        $to = intval($to);
        $current_year = $calendar->date('Y');

        $from_year = $current_year + $from;
        if ($element['year']['#value'] < $from_year  ) {
          $from_year = $element['year']['#value'];
        }
        $to_year = $current_year + $to;
        if ($element['year']['#value'] > $to_year  ) {
          $to_year = $element['year']['#value'];
        }
        $years = array();
        foreach (range($from_year, $to_year) as $year) {
          $years[$year] = $year;
        }
        $element['year']['#options'] = $years;
      }
    }
    if (isset($element['month'])) {
      if ($date_array) {
        $element['month']['#value'] = $date_array['month'];
      }
      $months = array();
      $_months = $calendar->getOption('monthsName');
      foreach ($_months as $n => $month) {
        $months[$n] = html_entity_decode($month, ENT_QUOTES, 'UTF-8');;
      }
      $element['month']['#options'] = $months;
    }
    if (isset($element['day'])) {
      if ($date_array) {
        $element['day']['#value'] = $date_array['day'];
      }
    }
  }

  return $element;
}

/**
 * @param $time
 * @param null $tz
 * @return array
 */
function _calendar_systems_get_granularity_from_time($time, $tz = NULL) {
  $granularity = array();
  $allgranularity = array('year', 'month', 'day', 'hour', 'minute', 'second', 'timezone');
  $temp = date_parse($time);
  // Special case for 'now'.
  if ($time == 'now') {
    $granularity = array('year', 'month', 'day', 'hour', 'minute', 'second');
  }
  else {
    // This PHP date_parse() method currently doesn't have resolution down to
    // seconds, so if there is some time, all will be set.
    foreach ($allgranularity as $g) {
      if ((isset($temp[$g]) && is_numeric($temp[$g])) || ($g == 'timezone' && (isset($temp['zone_type']) && $temp['zone_type'] > 0))) {
        $granularity[] = $g;
      }
    }
  }
  if ($tz) {
    $granularity[]='timezone';
  }

  return $granularity;
}

/**
 * @param $format
 * @return array
 */
function _calendar_systems_get_granularity_from_format($format) {
  return date_format_order($format);
}


/**
 * @param $format
 * @return array
 */
function _calendar_systems_get_granularity_part($part, $granularity) {
  $result = array();
  foreach ($granularity as $value) {
    switch ($part) {
      case 'date':
        if (in_array($value, array('year', 'month', 'day'))) {
          $result[] = $value;
        }
        break;
      case 'time':
        if (in_array($value, array('hour', 'minute', 'second', 'timezone'))) {
          $result[] = $value;
        }
        break;
      default:
    }
  }
  return $result;
}


/**
 * @param $format
 * @return array
 */
function _calendar_systems_get_format_part($part, $format) {
  $granularity = _calendar_systems_get_granularity_from_format($format);
  $granularity = _calendar_systems_get_granularity_part($part, $granularity);
  return date_limit_format($format, $granularity);
}